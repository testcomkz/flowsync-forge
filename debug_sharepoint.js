// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ Console –±—Ä–∞—É–∑–µ—Ä–∞ (F12 ‚Üí Console) –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ SharePoint

async function getSharePointIds() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ authService
    const token = await authService.getAccessToken();
    console.log('üîë Access Token:', token ? 'Present' : 'Missing');
    
    if (!token) {
      console.error('‚ùå No access token! Please connect to SharePoint first.');
      return;
    }

    const siteId = 'kzprimeestate.sharepoint.com,9f482633-8093-471a-a0e4-c6353a265373,df166f91-e314-4b9b-87a7-cbd2e26f2c1c';
    const headers = { 'Authorization': `Bearer ${token}` };
    
    console.log('üìç Step 1: Getting drives...');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ drives
    const drivesResponse = await fetch(
      `https://graph.microsoft.com/v1.0/sites/${siteId}/drives?$select=id,name,driveType,webUrl`,
      { headers }
    );
    const drivesData = await drivesResponse.json();
    console.log('üìÅ Available drives:', drivesData.value);
    
    // –ò—â–µ–º Documents drive
    const documentsLibrary = drivesData.value.find(d => d.name === 'Documents' || d.name === '–î–æ–∫—É–º–µ–Ω—Ç—ã');
    if (!documentsLibrary) {
      console.error('‚ùå Documents library not found!');
      return;
    }
    
    const driveId = documentsLibrary.id;
    console.log('‚úÖ DRIVE_ID:', driveId);
    
    console.log('üìç Step 2: Finding Excel file...');
    
    // 2. –ü–æ–∏—Å–∫ Excel —Ñ–∞–π–ª–∞
    const filePath = '/UPLOADS/pipe-inspection.xlsm';
    const fileResponse = await fetch(
      `https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/root:${filePath}?$select=id,name,webUrl`,
      { headers }
    );
    
    if (!fileResponse.ok) {
      console.error('‚ùå File not found at path:', filePath);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
      console.log('üîç Searching by filename...');
      const searchResponse = await fetch(
        `https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/root/search(q='pipe_inspection.xlsm')?$select=id,name,webUrl,parentReference`,
        { headers }
      );
      const searchData = await searchResponse.json();
      console.log('üîç Search results:', searchData.value);
      
      if (searchData.value.length === 0) {
        console.error('‚ùå File pipe_inspection.xlsm not found anywhere!');
        return;
      }
      
      const foundFile = searchData.value[0];
      const itemId = foundFile.id;
      console.log('‚úÖ ITEM_ID (from search):', itemId);
      console.log('üìÇ File location:', foundFile.parentReference?.path);
      
    } else {
      const fileData = await fileResponse.json();
      const itemId = fileData.id;
      console.log('‚úÖ ITEM_ID:', itemId);
    }
    
    console.log('üìç Step 3: Testing Excel access...');
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ worksheets
    const worksheetsResponse = await fetch(
      `https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets?$select=name`,
      { headers }
    );
    
    if (worksheetsResponse.ok) {
      const worksheetsData = await worksheetsResponse.json();
      console.log('üìä Available worksheets:', worksheetsData.value.map(w => w.name));
    } else {
      console.error('‚ùå Cannot access Excel worksheets:', await worksheetsResponse.text());
    }
    
    console.log('\nüéØ FINAL RESULTS:');
    console.log(`VITE_SP_SITE_ID=${siteId}`);
    console.log(`VITE_SP_DRIVE_ID=${driveId}`);
    console.log(`VITE_SP_ITEM_ID=${itemId}`);
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
console.log('üöÄ Getting SharePoint IDs...');
getSharePointIds();
