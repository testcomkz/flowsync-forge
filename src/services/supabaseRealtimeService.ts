import { supabase } from '@/lib/supabase';
import { safeLocalStorage } from '@/lib/safe-storage';
import type { RealtimeChannel } from '@supabase/supabase-js';

class SupabaseRealtimeService {
  private channel: RealtimeChannel | null = null;
  private listeners: Map<string, Set<Function>> = new Map();

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Realtime –∫–∞–Ω–∞–ª—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º broadcast –≤–º–µ—Å—Ç–æ postgres_changes)
  connect(): void {
    if (this.channel) {
      console.log('‚úÖ Already subscribed to Realtime');
      return;
    }

    console.log('üîå Connecting to Supabase Realtime...');

    this.channel = supabase
      .channel('sharepoint-updates')
      .on('broadcast', { event: 'excel-updated' }, (payload) => {
        console.log('üìä Realtime update received:', payload);
        this.handleUpdate(payload.payload);
      })
      .subscribe((status) => {
        if (status === 'SUBSCRIBED') {
          console.log('‚úÖ Subscribed to Supabase Realtime');
        } else if (status === 'CHANNEL_ERROR') {
          console.error('‚ùå Realtime subscription error');
        }
      });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  private async handleUpdate(update: any): Promise<void> {
    console.log('üîÑ Processing SharePoint update...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SharePoint —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ storage event
      safeLocalStorage.setItem('sharepoint_force_refresh', Date.now().toString());
      safeLocalStorage.dispatchStorageEvent('sharepoint_force_refresh', Date.now().toString());

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      this.notifyListeners('data-updated', update);

      console.log('‚úÖ Update processed');
    } catch (error) {
      console.error('‚ùå Error processing update:', error);
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  on(event: string, callback: Function): void {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, new Set());
    }
    this.listeners.get(event)!.add(callback);
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  off(event: string, callback: Function): void {
    const callbacks = this.listeners.get(event);
    if (callbacks) {
      callbacks.delete(callback);
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  private notifyListeners(event: string, data: any): void {
    const callbacks = this.listeners.get(event);
    if (callbacks) {
      callbacks.forEach(callback => callback(data));
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  disconnect(): void {
    if (this.channel) {
      supabase.removeChannel(this.channel);
      this.channel = null;
      console.log('üëã Disconnected from Realtime');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  isConnected(): boolean {
    return this.channel !== null;
  }
}

export const supabaseRealtimeService = new SupabaseRealtimeService();
